#!/usr/bin/env python

# Uploads files to CloudApp.
#
# Usage:
#   cloudapp <filepath>
# 
# Requires you set your CloudApp credentials in ~/.cloudapp as a simple file of:
#
#   email
#   password  
# 
# Requires:
# - requests - pip install requests
#
# API: https://github.com/cloudapp/api/blob/master/upload-file.md
#
# Inspired by https://github.com/holman/dotfiles/blob/master/bin/cloudapp
#
# Author: Artem Sapegin, sapegin.me
# License: MIT
# https://github.com/sapegin/dotfiles
#

from __future__ import print_function


CONFIG = '~/.cloudapp'
AUTH_URL = 'http://my.cl.ly'
API_URL = 'http://my.cl.ly/items/new'


import requests
from collections import OrderedDict
import os
import sys


def error(message):
	print(message, file=sys.stderr)
	exit(1)

def main():
	# Check CLI param
	if len(sys.argv) is not 2:
		error('Usage: %s <filepath>' % os.path.basename(sys.argv[0]))
	url = upload(sys.argv[1])
	print('File uploaded to %s' % url)

def read_config():
	config_path = os.path.expanduser(CONFIG)
	if not os.path.exists(config_path):
		error('You need to type your email and password (one per line) into %s.' % CONFIG)
	lines = file.readlines(open(config_path))
	lines = (line.strip() for line in lines)
	return lines

def upload(filepath):
	# Check file
	if not os.path.exists(filepath):
		error('File %s not found.' % filepath)	
	
	# Read config
	USER, PASS = read_config()

	# Append auth data
	s = requests.Session()
	s.auth = requests.auth.HTTPDigestAuth(USER, PASS)
	s.headers.update({'Accept': 'application/json'})

	# Request to upload
	upload_request = s.get(API_URL)
	if upload_request.status_code is not 200:
		error('Can not upload file. Status: %s.' % upload_request.status_code)

	# Check file size
	if os.path.getsize(filepath) > upload_request.json()['max_upload_size']:
		error('Maximum upload size exceeded.')

	# Convert response
	params = []
	for key, value in upload_request.json()['params'].items():
		params.append((key.encode('utf8'), value.encode('utf8')))
	data = OrderedDict(sorted(params))

	# Add file
	filename = (os.path.basename(filepath)).encode('utf8')
	data['key'] = data['key'].replace(r'${filename}', filename)
	files = {'file': (filename, open(filepath, 'rb').read())}

	# Upload file to S3
	stuff = requests.post(upload_request.json()['url'], data=data, files=files, allow_redirects=False)

	# Follow redirect
	result = s.get(stuff.headers['Location'])

	return result.json()['url']


if __name__ == '__main__':
	main()
