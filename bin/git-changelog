#!/usr/bin/env bash

# Updates changelog file with a list of commits since the latest version tag.
# 
# Usage:
#   git-changelog <major|minor|patch>
#
# Requires:
# - semver - https://github.com/sekati/semver
#
# Author: Artem Sapegin, sapegin.me
# License: MIT
# https://github.com/sapegin/dotfiles
#

FILENAME="Changelog.md"

# Common stuff
RED="$(tput setaf 1)"
CYAN="$(tput setaf 6)"
UNDERLINE="$(tput sgr 0 1)"
NOCOLOR="$(tput sgr0)"
function error() { echo -e "$UNDERLINE$RED$1$NOCOLOR\n"; }

command -v semver >/dev/null 2>&1 || { error "semver not installed: see comments for instructions."; exit 1; }

function usage() {
	echo "Usage:"
	echo "  `basename $0` <major|minor|patch>"
	echo
}

# List of commits
function list() {
	if test -z "$current_ver"; then
		# All commits (first release)
		git log --pretty="format:* %s"
	else
		# Since previous tag
		git log --pretty="format:* %s" $current_ver..
	fi
}

# Check CLI argument
if ([ -z "$1" ]) || ([ "$1" != "major" ] && [ "$1" != "minor" ] && [ "$1" != "patch" ]); then
	usage
	exit 1
fi

# Current version tag
current_ver=$(git describe --tags --abbrev=0 $(git rev-list --tags --max-count=1))

# Increase version number
if [ -z "$new_ver" ]; then
	[ "$1" == "patch" ] && new_ver=$(semver -p $current_ver)
	[ "$1" == "minor" ] && new_ver=$(semver -n $current_ver)
	[ "$1" == "major" ] && new_ver=$(semver -m $current_ver)
fi

# Heading
date=$(date +"%Y-%m-%d")
heading="# ${new_ver/v/} - $date\n\n"

# Write to a temporary file:
# 1. Heading
# 2. List of new commits
# 3. Old changelog (if exists)
tmp="/tmp/changelog"
printf "$heading" > $tmp
list >> $tmp
printf '\n\n' >> $tmp
if [ -f $FILENAME ]; then
	cat $FILENAME >> $tmp
fi

# Replace the old changelog with a temporary file
mv $tmp $FILENAME

# Open in an editor
subl $FILENAME
